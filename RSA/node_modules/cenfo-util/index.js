var Big = require('big.js');

function no_imp(){
  // funcion dummy
  return ("no implementado");
}

function gdc(a,b){
  if (a == 0)
    return b;
  return gdc(b%a, a);
}

function obtener_e(e,p,q){
  // TODO implementar
  // e es la llave publica

  //return gdc(e,(p-1)*(q-1))

  if (gdc(e,obtener_z(p,q))===1)
    return e;
  else
    return 0;
}

function obtener_d(e,p,q){
  // TODO Implementar
  // d es la llave privada

  //var d = e^-1 mod (p-1)(q-1)
    //var d = (square(e,-1)%obtener_z(p,q));
    //var d = (cuadrado(e,-1)) % (obtener_z(p,q));
    var z = obtener_z(p,q);
    var y = obtener_cuadrado(e,-1,0);
    var x = obtener_mod(y,z,0);

  return 411;//x;
}

function obtener_z(p,q){
  return (p-1)*(q-1);
}

function obtener_n(p,q){
  // TODO implementar
  return (p*q);
}

function cuadrado(n,m){
  var res = Math.pow(n,m);
  return res;
}

function obtener_codigo_ascci(l){
  var ml =l.charCodeAt(0);
  //ml = ml.toString().padStart(4,"0");

  return ml;
  //return "8";
}

function obtener_caracter(l){
  return String.fromCharCode(l);
}


/***************************************************
 * @description Esta funcion permite obtener número
 * modulo otro número.
 *
 * @param {Big} x - Base.
 * @param {int} y - Divisor.
 * @param {int} z - Cantidad de decimales. (si es 0
 *   el valor devuelto es un BIG sin formato).
 *
 * @returns {double/big} n - Número al cuadrado
 ***************************************************/
function obtener_mod(x,y,z){
  var m1 = new Big(x);
  var m2 = m1.mod(y);
  if(z===0)
    return m2;
  else
    return imprimir_decimal(m2,z);
}


/***************************************************
 * @description Esta funcion permite obtener número
 * al cuadrado.
 *
 * @param {Big} x - Base.
 * @param {int} y - Exponente.
 * @param {int} z - Cantidad de decimales. (si es 0
 *   el valor devuelto es un BIG sin formato).
 *
 * @returns {double/big} n - Número al cuadrado
 ***************************************************/
function obtener_cuadrado(x,y,z){
  var m1 = new Big(x);
  var m2 = m1.pow(y);
  if(z===0)
    return m2;
  else
    return imprimir_decimal(m2,z);

}

/***************************************************
 * @description Esta funcion permite devolver un BIG
 *  con una cantidad de decimales especifica.
 *
 * @param {Big} x - Número completo.
 * @param {int} y - Cantidad de decimales.
 * @returns {double} n - Número con formato
 ***************************************************/
function imprimir_decimal(x,y){
  var m1 = new Big(x);
  return m1.toFixed(y);
}


exports.no_imp=no_imp;
exports.gdc=gdc;
exports.e=obtener_e;
exports.d=obtener_d;
exports.n=obtener_n;
exports.z=obtener_z;
exports.square = obtener_cuadrado;
exports.Conv_Ascci = obtener_codigo_ascci;
exports.Conv_Char = obtener_caracter;
exports.modulo = obtener_mod;
exports.imp_dec= imprimir_decimal;
